// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: factors.proto

package factors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FactorsClient is the client API for Factors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactorsClient interface {
	Factorize(ctx context.Context, opts ...grpc.CallOption) (Factors_FactorizeClient, error)
}

type factorsClient struct {
	cc grpc.ClientConnInterface
}

func NewFactorsClient(cc grpc.ClientConnInterface) FactorsClient {
	return &factorsClient{cc}
}

func (c *factorsClient) Factorize(ctx context.Context, opts ...grpc.CallOption) (Factors_FactorizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Factors_ServiceDesc.Streams[0], "/factors.Factors/Factorize", opts...)
	if err != nil {
		return nil, err
	}
	x := &factorsFactorizeClient{stream}
	return x, nil
}

type Factors_FactorizeClient interface {
	Send(*FactorRequest) error
	Recv() (*FactorResponse, error)
	grpc.ClientStream
}

type factorsFactorizeClient struct {
	grpc.ClientStream
}

func (x *factorsFactorizeClient) Send(m *FactorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *factorsFactorizeClient) Recv() (*FactorResponse, error) {
	m := new(FactorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FactorsServer is the server API for Factors service.
// All implementations must embed UnimplementedFactorsServer
// for forward compatibility
type FactorsServer interface {
	Factorize(Factors_FactorizeServer) error
	mustEmbedUnimplementedFactorsServer()
}

// UnimplementedFactorsServer must be embedded to have forward compatible implementations.
type UnimplementedFactorsServer struct {
}

func (UnimplementedFactorsServer) Factorize(Factors_FactorizeServer) error {
	return status.Errorf(codes.Unimplemented, "method Factorize not implemented")
}
func (UnimplementedFactorsServer) mustEmbedUnimplementedFactorsServer() {}

// UnsafeFactorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactorsServer will
// result in compilation errors.
type UnsafeFactorsServer interface {
	mustEmbedUnimplementedFactorsServer()
}

func RegisterFactorsServer(s grpc.ServiceRegistrar, srv FactorsServer) {
	s.RegisterService(&Factors_ServiceDesc, srv)
}

func _Factors_Factorize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FactorsServer).Factorize(&factorsFactorizeServer{stream})
}

type Factors_FactorizeServer interface {
	Send(*FactorResponse) error
	Recv() (*FactorRequest, error)
	grpc.ServerStream
}

type factorsFactorizeServer struct {
	grpc.ServerStream
}

func (x *factorsFactorizeServer) Send(m *FactorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *factorsFactorizeServer) Recv() (*FactorRequest, error) {
	m := new(FactorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Factors_ServiceDesc is the grpc.ServiceDesc for Factors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Factors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "factors.Factors",
	HandlerType: (*FactorsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Factorize",
			Handler:       _Factors_Factorize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "factors.proto",
}
